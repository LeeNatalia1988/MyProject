apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
spec:
  replicas: 3 # Количество подов для обеспечения необходимой нагрузки, по условию.
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      affinity:
        podAntiAffinity: # поды на разных нодах.
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - web-app
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: web-app-container
          image: web-app # образ приложения.
          resources:
            requests:
              cpu: "200m" # в условии нет, взято условно.
              memory: "128Mi" # Запрос на память.
            limits:
              cpu: "400Mi" # Максимум, изначальный *2, взято условно.
              memory: "256Mi" # максимум памяти, изначальный *2, взято условно
          lifecycle:
            # Используем readinessProbe для определения готовности пода обрабатывать запросы.
            readinessProbe:
              exec:
                command:
                  - cat
                  - /tmp/healthy # Создается после инициализации.
              initialDelaySeconds: 10 # Задержка перед первым пробным запуском.
              periodSeconds: 5 # Проверяем готовность файла в строке 41 каждые 5 секунд, когда готов, то идем дальше
          command: ["sh", "-c", "sleep 10 && touch /tmp/healthy && exec web-app"]
      nodeSelector:
        node-role.kubernetes.io/app: "true"

---
apiVersion: v1
kind: Service
metadata:
  name: web-app-service
spec:
  type: ClusterIP
  selector:
    app: web-app
  ports:
    - port: 80
      targetPort: 8080
